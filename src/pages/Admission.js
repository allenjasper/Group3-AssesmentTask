import React, { useEffect, useState, useRef } from "react";
import { jsPDF } from "jspdf";
import "bootstrap/dist/css/bootstrap.min.css";

export default function Admission() {
  const [formData, setFormData] = useState({
    fullName: "",
    email: "",
    phone: "",
    address: "",
    course: "BSIT",
    studentType: "freshman",
    birthDate: "",
    gender: ""
  });

  const [errors, setErrors] = useState({});
  const [previewUrl, setPreviewUrl] = useState(null); 
  const [lastBlob, setLastBlob] = useState(null); 
  const iframeRef = useRef(null);

  const programs = [
    "BSIT - Bachelor of Science in Information Technology",
    "BSEd - Bachelor of Secondary Education",
    "BSBA - Bachelor of Science in Business Administration",
    "BSCS - Bachelor of Science in Computer Science",
    "BEED - Bachelor of Elementary Education",
    "BSAC - Bachelor of Science in Accountancy"
  ];

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    if (errors[name]) setErrors(prev => ({ ...prev, [name]: "" }));
  };

  const validateForm = () => {
    const newErrors = {};
    if (!formData.fullName.trim()) newErrors.fullName = "Full name is required";
    if (!formData.email.trim()) newErrors.email = "Email is required";
    if (!formData.phone.trim()) newErrors.phone = "Phone number is required";
    if (!formData.address.trim()) newErrors.address = "Address is required";
    if (!formData.birthDate) newErrors.birthDate = "Birth date is required";
    if (!formData.gender) newErrors.gender = "Gender is required";

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (formData.email && !emailRegex.test(formData.email))
      newErrors.email = "Please enter a valid email address";

    const phoneRegex = /^[0-9+\-\s()]+$/;
    if (formData.phone && !phoneRegex.test(formData.phone))
      newErrors.phone = "Please enter a valid phone number";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const createPdfBlob = () => {
    const doc = new jsPDF({ unit: "pt", format: "letter" });

    try {
      doc.addImage("/pnc-logo.png", "PNG", 40, 30, 60, 60);
    } catch (err) {
    }

    doc.setFontSize(18);
    doc.setFont("helvetica", "bold");
    doc.text("Pamantasan ng Cabuyao", 120, 50);
    doc.setFontSize(13);
    doc.setFont("helvetica", "normal");
    doc.text("Admission Application Form", 120, 70);
    doc.setDrawColor(0, 120, 70);
    doc.setLineWidth(1);
    doc.line(40, 90, 560, 90);

    let y = 115;
    doc.setFontSize(11);
    doc.setFont("helvetica", "bold");
    doc.text("PERSONAL INFORMATION", 40, y);
    doc.setFont("helvetica", "normal");
    y += 18;
    doc.text(`Full Name: ${formData.fullName}`, 40, y);
    y += 16;
    doc.text(`Email: ${formData.email}`, 40, y);
    y += 16;
    doc.text(`Phone: ${formData.phone}`, 40, y);
    y += 16;
    const addressLines = doc.splitTextToSize(`Address: ${formData.address}`, 480);
    doc.text(addressLines, 40, y);
    y += (addressLines.length * 14) + 2;
    doc.text(`Birth Date: ${formData.birthDate}`, 40, y);
    y += 16;
    doc.text(`Gender: ${formData.gender}`, 40, y);

    y += 20;
    doc.setFont("helvetica", "bold");
    doc.text("ACADEMIC INFORMATION", 40, y);
    y += 18;
    doc.setFont("helvetica", "normal");
    doc.text(`Preferred Course: ${formData.course}`, 40, y);
    y += 16;
    doc.text(`Student Type: ${formData.studentType}`, 40, y);

    doc.setFontSize(9);
    doc.text("Generated by PnC Admission Portal", 40, 740);
    doc.text(`Date Generated: ${new Date().toLocaleDateString()}`, 420, 740);

    const blob = doc.output("blob");
    return blob;
  };

  const handleGeneratePreview = (e) => {
    e?.preventDefault?.();
    if (!validateForm()) {
      const firstKey = Object.keys(errors)[0];
      if (firstKey) {
        const el = document.querySelector(`[name="${firstKey}"]`);
        if (el) el.focus();
      }
      return;
    }

    const blob = createPdfBlob();
    const url = URL.createObjectURL(blob);

    if (previewUrl) {
      URL.revokeObjectURL(previewUrl);
    }

    setLastBlob(blob);
    setPreviewUrl(url);

    setTimeout(() => {
      iframeRef.current?.scrollIntoView({ behavior: "smooth", block: "center" });
    }, 200);
  };

  const handleDownloadFilled = (e) => {
    e?.preventDefault?.();
    let blob = lastBlob;
    if (!blob) {
      if (!validateForm()) return;
      blob = createPdfBlob();
    }
    const filename = `${formData.fullName.replace(/\s+/g, "_") || "pnc_admission"}_form.pdf`;
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    link.remove();
    setTimeout(() => URL.revokeObjectURL(link.href), 5000);
  };

  useEffect(() => {
    return () => {
      if (previewUrl) URL.revokeObjectURL(previewUrl);
      if (lastBlob) {
        const tmp = URL.createObjectURL(lastBlob);
        URL.revokeObjectURL(tmp);
      }
    };
  }, [previewUrl, lastBlob]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!validateForm()) return;
    const blob = createPdfBlob();
    const filename = `${formData.fullName.replace(/\s+/g, "_") || "pnc_admission"}_form.pdf`;
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    link.remove();
    setTimeout(() => URL.revokeObjectURL(link.href), 5000);
  };

  return (
    <div className="container py-5">
      <div className="text-center mb-4">
        <h1 className="fw-bold text-success">PNC Admission Portal</h1>
        <p className="text-muted">Apply online — preview or download your completed admission form.</p>
      </div>

      <div className="row gx-4 gy-4">
        <div className="col-lg-4">
          <div className="card shadow-sm h-100">
            <div className="card-header bg-success text-white">
              <strong>Admission Requirements</strong>
            </div>
            <div className="card-body">
              <h6 className="text-success">For Freshmen</h6>
              <ul>
                <li>High School Report Card (Form 138)</li>
                <li>Birth Certificate (PSA)</li>
                <li>Good Moral Certificate</li>
                <li>Medical Certificate</li>
                <li>2x2 ID Photos (4 pcs)</li>
              </ul>

              <h6 className="text-success mt-3">For Transferees</h6>
              <ul>
                <li>Certificate of Transfer/Transfer Credential</li>
                <li>Official Transcript of Records</li>
                <li>Certificate of Good Moral Character</li>
                <li>Birth Certificate (PSA)</li>
              </ul>
            </div>
          </div>
        </div>

        <div className="col-lg-4">
          <div className="card shadow-sm h-100">
            <div className="card-header bg-success text-white">
              <strong>Application Process</strong>
            </div>
            <div className="card-body">
              <ol>
                <li>Fill out the online application form on the right.</li>
                <li>Submit all required documents to the Registrar (online upload or in-person).</li>
                <li>Take the entrance exam (if required by program).</li>
                <li>Attend interview (program-specific).</li>
                <li>Wait for admission results via email / SMS.</li>
                <li>Complete enrollment and payment steps.</li>
              </ol>

              <div className="alert alert-info mt-3 mb-0">
                <small><strong>Tip:</strong> You can preview the filled form before downloading using the "Preview Filled Form" button below the form.</small>
              </div>
            </div>
          </div>
        </div>

        <div className="col-lg-4">
          <div className="card shadow-sm h-100">
            <div className="card-header bg-success text-white d-flex justify-content-between align-items-center">
              <strong>Apply Now</strong>
              <small className="text-white-50">Fast • Secure • Official</small>
            </div>

            <div className="card-body">
              <form onSubmit={handleSubmit} noValidate>
                <div className="mb-3">
                  <label className="form-label">Full Name *</label>
                  <input
                    name="fullName"
                    value={formData.fullName}
                    onChange={handleChange}
                    type="text"
                    className={`form-control ${errors.fullName ? "is-invalid" : ""}`}
                    placeholder="Juan Dela Cruz"
                    required
                  />
                  {errors.fullName && <div className="invalid-feedback">{errors.fullName}</div>}
                </div>

                <div className="mb-3">
                  <label className="form-label">Email *</label>
                  <input
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    type="email"
                    className={`form-control ${errors.email ? "is-invalid" : ""}`}
                    placeholder="example@email.com"
                    required
                  />
                  {errors.email && <div className="invalid-feedback">{errors.email}</div>}
                </div>

                <div className="mb-3">
                  <label className="form-label">Phone *</label>
                  <input
                    name="phone"
                    value={formData.phone}
                    onChange={handleChange}
                    type="tel"
                    className={`form-control ${errors.phone ? "is-invalid" : ""}`}
                    placeholder="09123456789"
                    required
                  />
                  {errors.phone && <div className="invalid-feedback">{errors.phone}</div>}
                </div>

                <div className="mb-3">
                  <label className="form-label">Address *</label>
                  <textarea
                    name="address"
                    value={formData.address}
                    onChange={handleChange}
                    rows="2"
                    className={`form-control ${errors.address ? "is-invalid" : ""}`}
                    placeholder="Complete address"
                    required
                  />
                  {errors.address && <div className="invalid-feedback">{errors.address}</div>}
                </div>

                <div className="row">
                  <div className="col-md-6 mb-3">
                    <label className="form-label">Birth Date *</label>
                    <input
                      name="birthDate"
                      value={formData.birthDate}
                      onChange={handleChange}
                      type="date"
                      className={`form-control ${errors.birthDate ? "is-invalid" : ""}`}
                      required
                    />
                    {errors.birthDate && <div className="invalid-feedback">{errors.birthDate}</div>}
                  </div>

                  <div className="col-md-6 mb-3">
                    <label className="form-label">Gender *</label>
                    <select
                      name="gender"
                      value={formData.gender}
                      onChange={handleChange}
                      className={`form-select ${errors.gender ? "is-invalid" : ""}`}
                      required
                    >
                      <option value="">Select gender</option>
                      <option value="Male">Male</option>
                      <option value="Female">Female</option>
                      <option value="Other">Other</option>
                    </select>
                    {errors.gender && <div className="invalid-feedback">{errors.gender}</div>}
                  </div>
                </div>

                <div className="mb-3">
                  <label className="form-label">Preferred Course</label>
                  <select
                    name="course"
                    value={formData.course}
                    onChange={handleChange}
                    className="form-select"
                  >
                    {programs.map((p, idx) => (
                      <option key={idx} value={p.split(" - ")[0]}>
                        {p}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="mb-3">
                  <label className="form-label">Student Type</label>
                  <select
                    name="studentType"
                    value={formData.studentType}
                    onChange={handleChange}
                    className="form-select"
                  >
                    <option value="freshman">Freshman</option>
                    <option value="transferee">Transferee</option>
                  </select>
                </div>

                <div className="d-grid gap-2">
                  <button
                    type="button"
                    className="btn btn-outline-success"
                    onClick={handleGeneratePreview}
                  >
                    Preview Filled Form
                  </button>

                  <button
                    type="button"
                    className="btn btn-success"
                    onClick={handleDownloadFilled}
                  >
                    Download Filled Form (PDF)
                  </button>

                  <button type="submit" className="btn btn-primary">
                    Submit & Download Immediately
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      <div className="row mt-5">
        <div className="col-12">
          <div className="card border-0 shadow-sm">
            <div className="card-header bg-light">
              <strong>Preview — Filled Admission Form</strong>
              <small className="text-muted ms-2">(If you clicked "Preview Filled Form")</small>
            </div>
            <div className="card-body" style={{ minHeight: "360px" }}>
              {previewUrl ? (
                <iframe
                  ref={iframeRef}
                  title="Filled Admission Preview"
                  src={previewUrl}
                  style={{ width: "100%", height: "600px", border: "none" }}
                />
              ) : (
                <div className="text-center py-5 text-muted">
                  No preview available. Fill the form and click <strong>Preview Filled Form</strong>.
                </div>
              )}
            </div>
            {previewUrl && (
              <div className="card-footer d-flex justify-content-end">
                <a
                  href={previewUrl}
                  download={`${formData.fullName.replace(/\s+/g, "_") || "pnc_admission"}_form.pdf`}
                  className="btn btn-outline-primary me-2"
                >
                  Download Preview PDF
                </a>
                <button
                  className="btn btn-outline-secondary"
                  onClick={() => {
                    URL.revokeObjectURL(previewUrl);
                    setPreviewUrl(null);
                    setLastBlob(null);
                  }}
                >
                  Clear Preview
                </button>
              </div>
            )}
          </div>
        </div>
      </div>

    </div>
  );
}
